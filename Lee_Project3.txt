;Write an LC-3 assembly program that will retrieve 5 digits from the keyboard.
; R0 = 
; R1 = 
; R2 = 
; R3 = 
; R4 = ODD
; R5 = EVEN
; R6 = SUM
; R7 = 

.orig x3000; start at x3000
	LD R2, ZERO

	LEA R0, PROMPT
	PUTS

	LD R1, COUNT	; initialize counter R1

AGAIN 	
	BRz OUTPUT_SUM
	; loop body
	LD R0, 	NEWLINE
	OUT
	OUT
	LD R0, 	LEFTSQBR
	OUT
	ADD R0, R2, #1
	OUT
	LD R0, 	RIGHTSQBR
	OUT
	LD R0, 	COLON
	OUT

	;Printing out [i]: 

	GETC; getting keyboard input loads into R0
	OUT; Printing keyboard input
	
	JSR VALIDATE; jump to subroutine VALIDATE
	ADD R5, R5, #0	; set CC based on R5
	BRp NO_GOOD

	ADD R2, R2, #1; Printed number increases
	ADD R1, R1 #-1; Decrement counter for loop
	BRnzp AGAIN

NO_GOOD 
	LD R0, 	NEWLINE
	OUT
	OUT
	LEA R0, ERROR
	PUTS
	ADD R1, R1, #0
	BRnzp AGAIN

VALIDATE	
	ST R7, VSAVE_R7
	ST R1, VSAVE_R1
	
	AND R5, R5, #0	; Resetting R5

	LD R1, NEG_0; R1 = #-48
	ADD R1, R0, R1; checking whether value is >= 0. If less than 0, then flag will be negative
	BRn BAD
	LD R1, NEG_9
	ADD R1, R0, R1; checking whether value is <= 9. If greater than 9, then flag will be positive
	BRp BAD
	BRnzp GOOD; passes the checks

VSAVE_R7 .blkw #1
VSAVE_R1 .blkw #1

BAD	
	AND, R0, R0, #0
	ADD R5, R5, #1; sets flag to P to branch to NO_GOOD
GOOD	 

	LD R7, VSAVE_R7
	LD R1, VSAVE_R1
	ADD, R0, R0, #-16
	ADD, R0, R0, #-16
	ADD, R0, R0, #-16; turn ASCII into int
	; Turn ASCII value into an integer
	BRzp ADD_SUM
	BRn RETURN

ADD_SUM
	ADD, R6, R0, R6; Adds integer value to SUM register = R6
	AND, R3, R0, #1; Checks if odd. If P then odd, if Z then even.
	BRz, #1; if even, skips adding to register. If odd continue.
	ADD, R4, R0, R4; Add integer value to ODD register = R4
	RET

RETURN
	RET

LEFTSQBR .fill x005B
RIGHTSQBR .fill x005D
COLON .fill x003A
NEWLINE .fill x000A
.fill #0
COUNT .fill #5
ZERO .fill x0030

PROMPT .stringz "Enter 5 digits... "
ERROR .stringz "Invalid input. Input between 0 - 9. Try again..."

OUTPUT_SUM 
	LD, R0, NEWLINE
	OUT
	OUT
	ST, R6, SUM; Stores SUM
	ST, R4, ODD; Stores ODD
	NOT, R5, R4;
	ADD, R5, R5, #1; gets two's complement of odd so you can subtract
	ADD, R5, R6, R5; Stores EVEN
	ST, R5, EVEN

; At this point, SUM, ODD, and EVEN have the correct integer values. 
; All registers besides R0 and R7 are usable.
; Start your counter at #-1 for tenths place

	LD, R1, SUM
	LD, R5, NEG_10; R5 = #-10
	LD, R2, NEG_1;
	AND, R4, R4, #0; Reset R4 for counter
	ADD, R4, R4, #0; Counter start = #0
	AND, R6, R6, #0; Reset R6 for counter

TENTHS_SUM
	ADD, R4, R4, #1; Counter++
	ADD, R1, R5, R1; SUM - 10
	BRp TENTHS_SUM; Loops until all tenths are gone
	BRz PRINT_SUM
	BRn FIX_SUM
; R4 now has tenths values

FIX_SUM	
	ADD, R1, R1, #10 ; R1 has ONES value
	ADD, R4, R4, #-1

	BRnzp PRINT_SUM

PRINT_SUM
	ADD, R4, R4, #12
	ADD, R4, R4, #12
	ADD, R4, R4, #12
	ADD, R4, R4, #12; ASCII value of TENTHS
	ADD, R1, R1, #12
	ADD, R1, R1, #12
	ADD, R1, R1, #12
	ADD, R1, R1, #12; ASCII value of ONES
	ST, R4, SUM;
	LEA, R0, SUM_PROMPT
	PUTS
	LD, R0, SUM;
	OUT
	ST, R1, SUM
	LD, R0, SUM
	OUT
	LD R0, 	NEWLINE
	OUT
	OUT
	BRnzp OUTPUT_ODD

OUTPUT_ODD
	LD, R1, ODD
	LD, R5, NEG_10; R5 = #-10
	LD, R2, NEG_1;
	AND, R4, R4, #0; Reset R4 for counter
	ADD, R4, R4, #0; Counter start = #0
	AND, R6, R6, #0; Reset R6 for counter

TENTHS_ODD
	ADD, R4, R4, #1; Counter++
	ADD, R1, R5, R1; ODD - 10
	BRp TENTHS_ODD; Loops until all tenths are gone
	BRz PRINT_ODD
	BRn FIX_ODD
; R4 now has tenths values

FIX_ODD	
	ADD, R1, R1, #10 ; R1 has ONES value
	ADD, R4, R4, #-1

	BRnzp PRINT_ODD

PRINT_ODD
	ADD, R4, R4, #12
	ADD, R4, R4, #12
	ADD, R4, R4, #12
	ADD, R4, R4, #12; ASCII value of TENTHS
	ADD, R1, R1, #12
	ADD, R1, R1, #12
	ADD, R1, R1, #12
	ADD, R1, R1, #12; ASCII value of ONES
	ST, R4, ODD;
	LEA, R0, ODD_PROMPT
	PUTS
	LD, R0, ODD;
	OUT
	ST, R1, ODD
	LD, R0, ODD
	OUT
	LD R0, 	NEWLINE
	OUT
	OUT
	BRnzp OUTPUT_EVEN

OUTPUT_EVEN
	
	LD, R1, EVEN
	LD, R5, NEG_10; R5 = #-10
	LD, R2, NEG_1;
	AND, R4, R4, #0; Reset R4 for counter
	ADD, R4, R4, #0; Counter start = #0
	AND, R6, R6, #0; Reset R6 for counter

TENTHS_EVEN
	ADD, R4, R4, #1; Counter++
	ADD, R1, R5, R1; EVEN - 10
	BRp TENTHS_EVEN; Loops until all tenths are gone
	BRz PRINT_EVEN
	BRn FIX_EVEN
; R4 now has tenths values

FIX_EVEN	
	ADD, R1, R1, #10 ; R1 has ONES value
	ADD, R4, R4, #-1

	BRnzp PRINT_EVEN

PRINT_EVEN
	ADD, R4, R4, #12
	ADD, R4, R4, #12
	ADD, R4, R4, #12
	ADD, R4, R4, #12; ASCII value of TENTHS
	ADD, R1, R1, #12
	ADD, R1, R1, #12
	ADD, R1, R1, #12
	ADD, R1, R1, #12; ASCII value of ONES
	ST, R4, EVEN;
	LEA, R0, EVEN_PROMPT
	PUTS
	LD, R0, EVEN;
	OUT
	ST, R1, EVEN
	LD, R0, EVEN
	OUT
	LD R0, 	NEWLINE
	OUT
	BRnzp DONE

DONE
	HALT
 
SUM .blkw #1
EVEN .blkw #1
ODD .blkw #1

NEG_0 .fill #-48
NEG_9 .fill #-57
NEG_1 .fill #-1
NEG_10 .fill #-10

SUM_PROMPT .stringz  "Sum of all inputs values = "
ODD_PROMPT .stringz "Sum of all odd input values = "
EVEN_PROMPT .stringz "Sum of all even input values = "

.end